/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/auth/send-email-otp": {
    post: operations["AuthController_sendEmailOtp"];
  };
  "/api/auth/verify-email-otp": {
    post: operations["AuthController_verfiyEmailOtp"];
  };
  "/api/auth/send-phone-otp": {
    post: operations["AuthController_sendPhoneOtp"];
  };
  "/api/auth/verify-phone-otp": {
    post: operations["AuthController_verifyPhoneOtp"];
  };
  "/api/auth/register": {
    post: operations["AuthController_register"];
  };
  "/api/auth/login": {
    post: operations["AuthController_userLogin"];
  };
  "/api/auth/refresh": {
    post: operations["AuthController_refresh"];
  };
  "/api/auth/logout": {
    post: operations["AuthController_logout"];
  };
  "/api/auth/send-forgot-password-otp": {
    post: operations["AuthController_sendForgotPasswordOTP"];
  };
  "/api/auth/verify-forgot-password-otp": {
    post: operations["AuthController_verifyForgotPasswordOTP"];
  };
  "/api/auth/forgot-password": {
    post: operations["AuthController_updateForgotPassword"];
  };
  "/api/auth/verify": {
    post: operations["AuthController_verify"];
  };
  "/api/user/s3-upload-url": {
    get: operations["UserController_getS3Url"];
  };
  "/api/user/profile": {
    get: operations["UserController_getUserInfo"];
    put: operations["UserController_updateProfileInfo"];
  };
  "/api/user/change-password": {
    post: operations["UserController_changePassword"];
  };
  "/api/notification": {
    get: operations["NotificationController_getNotifications"];
  };
  "/api/notification/status": {
    put: operations["NotificationController_updateNotificationAsViewed"];
  };
  "/api/notification/settings": {
    get: operations["NotificationController_getNotificationSettings"];
    put: operations["NotificationController_updateNotificationSettings"];
    post: operations["NotificationController_addNotificationSettings"];
  };
  "/api/reputation": {
    get: operations["ReputationController_getReputationScore"];
  };
  "/api/community/register": {
    post: operations["CommunityController_createNewUser"];
  };
  "/api/community/tags": {
    get: operations["CommunityController_getTags"];
  };
  "/api/community/categories": {
    get: operations["CommunityController_getCategories"];
  };
  "/api/community/topics": {
    get: operations["CommunityController_getTopics"];
    post: operations["CommunityController_getPosts"];
  };
  "/api/community/topics/{topicId}": {
    get: operations["CommunityController_getTopicDetails"];
  };
  "/api/community/post/{postId}/replies": {
    get: operations["CommunityController_getReplies"];
  };
  "/api/community/post/reply": {
    post: operations["CommunityController_replyToPost"];
  };
  "/api/community/post/{postId}/like": {
    post: operations["CommunityController_likePost"];
  };
  "/api/skill": {
    get: operations["SkillController_getSkills"];
    post: operations["SkillController_addSkills"];
  };
  "/api/skill/bulk-upload": {
    post: operations["SkillController_bulkUploadSkills"];
  };
  "/api/user/skill": {
    get: operations["SkillController_getUserSkills"];
    post: operations["SkillController_addUserSkill"];
  };
  "/api/user/skill/send-invite": {
    post: operations["SkillController_sendVerificationInvite"];
  };
  "/api/skill/{verifictaionId}/questions": {
    get: operations["SkillController_getSkillsQuestion"];
  };
  "/api/skill/verify-invite": {
    post: operations["SkillController_verifyQuestionsAnswer"];
  };
  "/api/reputation-constant/weightage": {
    get: operations["ReputationConstantController_getWeightageForReputation"];
    put: operations["ReputationConstantController_updateWeightageForReputation"];
    post: operations["ReputationConstantController_addWeightageForReputation"];
  };
  "/api/reputation-constant/question": {
    post: operations["ReputationConstantController_CreateQuestion"];
  };
  "/api/reputation-constant/answer": {
    post: operations["ReputationConstantController_CreateAnswer"];
  };
  "/api/admin-settings/platform": {
    get: operations["AdminSettingsController_getWeightageForReputation"];
    put: operations["AdminSettingsController_UpdatePlatform"];
    post: operations["AdminSettingsController_addNewPlatform"];
  };
  "/api/education": {
    get: operations["EducationController_getEducation"];
    put: operations["EducationController_updateEducation"];
    post: operations["EducationController_addNewEducation"];
    delete: operations["EducationController_deleteEducationDetail"];
  };
  "/api/education/{educationId}": {
    get: operations["EducationController_getEducationById"];
  };
  "/api/certificate": {
    get: operations["EducationController_getCertificates"];
    put: operations["EducationController_updateCertificate"];
    post: operations["EducationController_addNewCertification"];
    delete: operations["EducationController_deleteCertificateDetail"];
  };
  "/api/certificate/{certificateId}": {
    get: operations["EducationController_getCertificateById"];
  };
  "/api/employment": {
    get: operations["EmploymentController_getAllEmployment"];
    put: operations["EmploymentController_updateEmployment"];
    post: operations["EmploymentController_createNewEmployment"];
    delete: operations["EmploymentController_deleteEmploymentRecord"];
  };
  "/api/employment/{employmentId}": {
    get: operations["EmploymentController_getEmploymentbyId"];
  };
  "/api/employment/{verificationId}/questions": {
    get: operations["EmploymentController_getProjectQuestion"];
  };
  "/api/employment/send-invite": {
    post: operations["EmploymentController_sendEmploymentInvite"];
  };
  "/api/employment/verify-invite": {
    post: operations["EmploymentController_verifyQuestionsAnswer"];
  };
  "/api/client-project": {
    get: operations["ClientProjectController_getAllClientProjects"];
    put: operations["ClientProjectController_updateEmployment"];
    post: operations["ClientProjectController_addNewClientProject"];
    delete: operations["ClientProjectController_deleteEmploymentRecord"];
  };
  "/api/client-project/send-invite": {
    post: operations["ClientProjectController_sendClientProjectInvite"];
  };
  "/api/client-project/{clientProjectId}/questions": {
    get: operations["ClientProjectController_getProjectQuestion"];
  };
  "/api/client-project/{clientProjectId}": {
    get: operations["ClientProjectController_getClientProjectById"];
  };
  "/api/client-project/verify-invite": {
    post: operations["ClientProjectController_verifyClientProjectInvite"];
  };
  "/api/connection/send-invite": {
    post: operations["ConnectionController_sendConnectionInvite"];
  };
  "/api/connection/accept-invite": {
    post: operations["ConnectionController_acceptConnectionInvite"];
  };
  "/api/connection": {
    get: operations["ConnectionController_getUserConnection"];
    delete: operations["ConnectionController_revokeConnection"];
  };
  "/api/teams": {
    get: operations["TeamController_getTeamListForUser"];
    put: operations["TeamController_updateTeam"];
    post: operations["TeamController_createNewTeam"];
    delete: operations["TeamController_deleteTeam"];
  };
  "/api/teams/{teamId}": {
    get: operations["TeamController_getTeamInfo"];
  };
  "/api/teams/member": {
    delete: operations["TeamController_deleteTeamMember"];
  };
  "/api/teams/send-invite": {
    post: operations["TeamController_sendInvitationToExtenamUser"];
  };
  "/api/teams/accept-invite": {
    post: operations["TeamController_acceptInvite"];
  };
  "/api/projects": {
    put: operations["ProjectController_updateProject"];
    post: operations["ProjectController_addNewProject"];
    delete: operations["ProjectController_deleteProjects"];
  };
  "/api/projects/explore": {
    get: operations["ProjectController_getProjectBySearch"];
  };
  "/api/projects/my-projects": {
    get: operations["ProjectController_getMyProject"];
  };
  "/api/projects/{projectId}": {
    get: operations["ProjectController_getProjectInfoById"];
  };
  "/api/projects/{projectId}/members": {
    get: operations["ProjectController_getProjectMembersList"];
  };
  "/api/projects/members": {
    delete: operations["ProjectController_removeProjectMember"];
  };
  "/api/projects/{projectId}/applications": {
    get: operations["ProjectController_getApplicantsList"];
  };
  "/api/projects/apply": {
    put: operations["ProjectController_applyForProject"];
  };
  "/api/projects/accept": {
    put: operations["ProjectController_addUserToProject"];
  };
  "/api/projects/update-status": {
    put: operations["ProjectController_updateProjectStatus"];
  };
  "/api/projects/send-invite": {
    post: operations["ProjectController_sendProjectInvite"];
  };
  "/api/projects/accept-invite": {
    post: operations["ProjectController_acceptInvite"];
  };
  "/api/wallet": {
    get: operations["WalletController_getWalletInfo"];
  };
  "/api/template": {
    get: operations["TemplateController_getTemplateList"];
    put: operations["TemplateController_updateTemplate"];
    post: operations["TemplateController_addNewTemplate"];
    delete: operations["TemplateController_deleteTempalte"];
  };
  "/api/template/publish": {
    post: operations["TemplateController_publishTemplates"];
  };
  "/api/template/{templateId}": {
    get: operations["TemplateController_getTemplateInfoByTemplateIId"];
  };
  "/api/template/slug/{slug}": {
    get: operations["TemplateController_getTemplateInfoForSlug"];
  };
  "/api/admin/profile": {
    get: operations["AdminController_getAdminProfileInfo"];
  };
  "/api/admin/users": {
    get: operations["AdminController_getUserList"];
    put: operations["AdminController_activateOrDeactivateUser"];
  };
  "/api/admin/users/export": {
    get: operations["AdminController_exportUserInfo"];
  };
  "/api/admin/users/{userId}": {
    get: operations["AdminController_getUserInfo"];
  };
  "/api/admin/dashboard": {
    get: operations["AdminController_getDashboardData"];
  };
  "/api/stripe/connect": {
    post: operations["StripeController_addNewStripeConnect"];
  };
  "/api/stripe/invoice": {
    post: operations["StripeController_sendInvoice"];
  };
  "/api/stripe/account-status": {
    get: operations["StripeController_getAccount"];
    put: operations["StripeController_checkAndUpdateAccountStatus"];
  };
  "/api/stripe/invoices": {
    get: operations["StripeController_getInvoices"];
  };
  "/api/stripe/invoice/{invoiceId}/verify": {
    get: operations["StripeController_verifyInvoice"];
  };
}

export interface components {
  schemas: {
    SendEmailDto: {
      /** @description Email id in valid email format. */
      email: string;
    };
    VerifyEmailDto: {
      /** @description Email id, valid email format. */
      email: string;
      /** @description 6 digit OTP number. */
      otp: number;
    };
    SendPhoneOtpDto: {
      /** @description Email id, valid email format. */
      email: string;
      /** @description User phone number. */
      phoneNumber: string;
    };
    VerifyPhoneOtpDto: {
      /** @description Email id, valid email format. */
      email: string;
      /** @description 6 digit OTP number. */
      otp: number;
      /** @description User phone number. */
      phoneNumber: string;
    };
    RegisterDto: {
      /** @description Email id, valid email format. */
      email: string;
      /** @description firstName, max of 50 characters and no special characters or number is allowed. */
      firstName: string;
      /** @description lastName, max of 50 characters and no special characters or number is allowed. */
      lastName: string;
      /** @description Password must consist of one uppercase letter, one lowercase letter and one special character. */
      password: string;
      /** @description Either true or false representing if termsAndCondition is accepted by user. */
      termsAndCondition: boolean;
      /** @description Full address. */
      address: string;
      /** @description State name */
      state: string;
      /** @description Country name. */
      country: string;
      /** @description User phone number. */
      phoneNumber: string;
      /** @description website url. */
      personalWebsite: string;
      /** @description ({folder}/{fileName}) of image uploaded in s3 bucket. */
      profileImage: string;
      /** @description Hourly rate. */
      hourlyRate: number;
      /** @description Basic description of user i.e about yourself. */
      about: string;
      /** @description external link, like github repo etc. */
      externalLink: string;
      /** @description User who has invited this user. */
      invitedBy: string;
    };
    UserLoginDto: {
      /** @description User Email id. It must be valid email format. */
      email: string;
      /** @description Password must consist of one uppercase letter, one lowercase letter and one special character. */
      password: string;
    };
    TokenPayloadDto: {
      /** @description Access token. This token is used for authenticating other apis */
      accessToken: string;
    };
    LoginResponseDto: {
      token: components["schemas"]["TokenPayloadDto"];
      role: number;
    };
    ForgotPasswordDto: {
      /** @description Email id, valid email format. */
      email: string;
      /** @description 6 digit OTP number. */
      otp: number;
      /** @description Password must consist of one uppercase letter, one lowercase letter and one special character. */
      password: string;
      /** @description confirmPassword must be same as password. */
      confirmPassword: string;
    };
    VerifyDto: {
      /** @description Id which needs to be verified, It should be one of ClientProjectInvitationId, EmploymentInvitationId, or  SkillInvitationId */
      verificationId: string;
      /** @description Question type, SKILLS, CLIENT_PROJECT or EMPLOYMENT */
      questionType: string;
    };
    VerifyInfoDto: {
      /** @description True if user is registered or false if user is unregistered. */
      isRegistered?: boolean;
      /** @description Type of verification id it is, It can be SKILLS, EMPLOYMENT, CLIENT_PROJECT etc */
      type?: string;
      /** @description Verification id. */
      varificationId?: string;
      /** @description True if already verified. */
      isVerified?: boolean;
    };
    S3UploadDto: {
      /** @description Presigned s3 url genrated with unique filename for given mime type and folder. */
      s3UploadUrl: string;
    };
    UserListDto: {
      /** @description User id. */
      userId: string;
      /** @description True if account is active, false it user is suspended. */
      status: boolean;
      /** @description Email id, valid email format. */
      email: string;
      /** @description firstName, max of 100 characters. */
      firstName: string;
      /** @description lastName, max of 100 characters. */
      lastName: string;
      /** @description Full address. */
      address: string;
      /** @description State name */
      state: string;
      /** @description Country name. */
      country: string;
      /** @description User phone number. */
      phoneNumber: string;
      /** @description website url. */
      personalWebsite: string;
      /** @description ({folder}/{fileName}) of image uploaded in s3 bucket. */
      profileImage: string;
      /** @description Hourly rate. */
      hourlyRate: number;
      /** @description Basic description of user i.e about yourself. */
      about: string;
      /** @description External link, like github repo etc. */
      externalLinks: string;
      /** @description Users designation */
      domain: string;
      /** @description Users role in designation */
      domainRole: string;
      /** @description Reputation score */
      reputationScore: number;
      /** @description No of connection user has */
      connectionCount: number;
      /** @description Date at which user is created */
      createdAt: { [key: string]: unknown };
      /** @description Defines whether the user is registered in discourse or not */
      isDiscourseUser: boolean;
    };
    UpdateProfileDto: {
      /** @description Email id, valid email format. */
      email: string;
      /** @description firstName, max of 100 characters. */
      firstName: string;
      /** @description lastName, max of 100 characters. */
      lastName: string;
      /** @description Either true or false representing if termsAndCondition is accepted by user. */
      termsAndCondition: boolean;
      /** @description Full address. */
      address: string;
      /** @description State name */
      state: string;
      /** @description Country name. */
      country: string;
      /** @description User phone number. */
      phoneNumber: string;
      /** @description website url. */
      personalWebsite: string;
      /** @description ({folder}/{fileName}) of image uploaded in s3 bucket. */
      profileImage: string;
      /** @description Hourly rate. */
      hourlyRate: number;
      /** @description Basic description of user i.e about yourself. */
      about: string;
      /** @description external link, like github repo etc. */
      externalLink: string;
    };
    ChangePasswordDto: {
      /** @description Currently logged in password. */
      currentPassword: string;
      /** @description Password must consist of one uppercase letter, one lowercase letter and one special character. */
      password: string;
      /** @description confirmPassword must be same as password. */
      confirmPassword: string;
    };
    UserEntity: { [key: string]: unknown };
    NotificationsDto: {
      /**
       * @description If user wants to receive emails or not.
       * @enum {string}
       */
      notificationType:
        | "SKILLS"
        | "CLIENT_PROJECT"
        | "EMPLOYMENT"
        | "CUSTOM"
        | "PROJECT"
        | "TEAM"
        | "CONNECTION";
      /** @description UserId of the user. */
      user: components["schemas"]["UserEntity"];
      /** @description It is primary Id of the type of notification */
      typeId?: string;
      /** @description Notification title */
      title?: string;
      /** @description Notification text */
      message?: string;
      /** @description False if notification is not yet viewed by the user */
      isViewed: boolean;
      /** @description False if notification is deleted */
      status: boolean;
    };
    UpdateNotificationStatus: {
      /** @description Notification id. */
      notificationId: string;
      /** @description If notification needs to be marked as viewed. */
      viewed: boolean;
      /** @description If notification needs to be marked as deleted. */
      remove: boolean;
    };
    NotificationSettingDto: {
      /** @description If user wants to receive emails or not. */
      isEmail?: boolean;
      /** @description Number of external connections allowed per user. */
      externalConnection?: number;
      /** @description Number of internal connections allowed per user. */
      internalConnection?: number;
      /** @description UserId of the user. */
      user?: components["schemas"]["UserEntity"];
      /** @description True if notification settings is deleted */
      isDeleted?: boolean;
    };
    UpdateNotificationSettings: {
      /** @description Notification setting id. */
      notificationSettingId: string;
      /** @description If user wants to receive emails or not. */
      isEmail: boolean;
      /** @description Number of external connections allowed per user. */
      externalConnection: number;
      /** @description Number of internal connections allowed per user. */
      internalConnection: number;
    };
    CreateTopicDto: {
      /** @description Category Id to create topic in */
      categoryId: number;
    };
    PostReplyDto: {
      /** @description Raw data of the post */
      raw: string;
      /** @description post Id */
      postId: number;
      /** @description topic Id */
      topicId: number;
      /** @description postNumber for which the reply is sent. */
      replyToPostNumber: number;
    };
    AddSkillDto: {
      /** @description Name of the skill. */
      name: string;
    };
    SkillDto: {
      /** @description Name of the skill. */
      name?: string;
      /** @description Defines whether skill is active or not. If true then it is active else inactive skill. */
      status?: boolean;
    };
    AddUserSkillDto: {
      /** @description Name of the skill. */
      domain: string;
      /** @description Name of the skill. */
      role: string;
      /** @description Name of the skill. */
      skills: string[];
    };
    UserSkillDto: {
      /** @description Skill Id. */
      skillId: string;
      /** @description Skill name. */
      skillName: string;
      /** @description Levels, Intermediate, Beginner. */
      level: string;
      /** @description Experience duration in months or year. */
      experience: string;
    };
    SkillInviteDto: {
      /** @description Skill id, which is to be verified. */
      skillId: string;
      /** @description Array of skill member info. */
      members: string[];
    };
    VerifySkillDto: {
      /** @description Verification id. */
      verificationId: string;
      /** @description Relationship answer id. */
      relationship: string;
      /** @description Knowledge answer id. */
      knowledge: string;
      /** @description Recommendation rating. */
      recommendation: number;
    };
    AddReputationWeightDto: {
      /** @description Basic KYC percentage. */
      basicKyc: number;
      /** @description Advance KYC percentage. */
      advanceKyc: number;
      /** @description Skill rating percentage. */
      skillRating: number;
      /** @description Skills percentage. */
      skills: number;
      /** @description Education percentage. */
      education: number;
      /** @description Certificate percentage. */
      certification: number;
      /** @description Client project percentage. */
      clientProject: number;
      /** @description Employment history percentage. */
      employmentHistory: number;
    };
    UpdateReputationWeightDto: {
      /** @description Reputation Weightage Id. */
      reputationId: string;
      /** @description Basic KYC percentage. */
      basicKyc: number;
      /** @description Advance KYC percentage. */
      advanceKyc: number;
      /** @description Skill rating percentage. */
      skillRating: number;
      /** @description Skills percentage. */
      skills: number;
      /** @description Education percentage. */
      education: number;
      /** @description Certificate percentage. */
      certification: number;
      /** @description Client project percentage. */
      clientProject: number;
      /** @description Employment history percentage. */
      employmentHistory: number;
    };
    ReputationWeightDto: {
      /** @description UserId who has created the record. */
      createdBy: components["schemas"]["UserEntity"];
      /** @description Basic KYC percentage. */
      basicKyc: number;
      /** @description Advance KYC percentage. */
      advanceKyc: number;
      /** @description Skill rating percentage. */
      skillRating: number;
      /** @description Skills percentage. */
      skills: number;
      /** @description Education percentage. */
      education: number;
      /** @description Certificate percentage. */
      certification: number;
      /** @description Client project percentage. */
      clientProject: number;
      /** @description Employment history percentage. */
      employmentHistory: number;
    };
    AddQuestionDto: {
      /** @description Question text */
      question: string;
      /** @description Question type, SKILLS, CLIENT_PROJECT or EMPLOYMENT */
      questionType: string;
      /** @description Question text */
      weightage: number;
      /** @description Parent question id for the sub question */
      parentQuestionId?: string;
    };
    AddAnswerDto: {
      /** @description Id of the question for which this answer needs to be added */
      questionId: string;
      /** @description Answer text */
      answer: string;
      /** @description Answer type, SKILLS, CLIENT_PROJECT or EMPLOYMENT */
      answerType: string;
      /** @description Answers  value */
      value: number;
    };
    AddPlatformSettingsDto: {
      /** @description Number of invites can be sent per user. */
      invites: number;
      /** @description Number of projects created per user. */
      project: number;
      /** @description Number of skills can be added per user. */
      skills: number;
      /** @description Number of education can be added per user. */
      education: number;
      /** @description Number of certification can be added per user. */
      certification: number;
      /** @description Number of employment can be added per user. */
      employment: number;
    };
    UpdatePlatformSettingsDto: {
      /** @description Id of the platform settings. */
      platformSettingId: string;
      /** @description Number of invites can be sent per user. */
      invites: number;
      /** @description Number of projects created per user. */
      project: number;
      /** @description Number of skills can be added per user. */
      skills: number;
      /** @description Number of education can be added per user. */
      education: number;
      /** @description Number of certification can be added per user. */
      certification: number;
      /** @description Number of employment can be added per user. */
      employment: number;
    };
    PlatformSettingsDto: {
      /** @description User id, who has created the record. */
      createdBy: components["schemas"]["UserEntity"];
      /** @description Number of invites can be sent per user. */
      invites: number;
      /** @description Number of projects created per user. */
      project: number;
      /** @description Number of skills can be added per user. */
      skills: number;
      /** @description Number of education can be added per user. */
      education: number;
      /** @description Number of certification can be added per user. */
      certification: number;
      /** @description Number of employment can be added per user. */
      employment: number;
      /** @description True if the platform setting is deleted. */
      isDeleted: boolean;
    };
    AddEducationDto: {
      /** @description Degree. */
      degree: string;
      /** @description School name. */
      school: string;
      /** @description Year in which degree completed. */
      year: string;
      /** @description Uploaded education file name. */
      fileName: string;
      /** @description Uploaded education file location {folderName/filename.mimetype} . */
      fileLocation: string;
      /** @description Uploaded file mimetype. */
      fileMimeType: string;
    };
    UpdateEducationDto: {
      /** @description Education Id. */
      educationId: string;
      /** @description Degree. */
      degree: string;
      /** @description School name. */
      school: string;
      /** @description Uploaded education file name. */
      fileName: string;
      /** @description Uploaded education file location {folderName/filename.mimetype} . */
      fileLocation: string;
      /** @description Uploaded file mimetype. */
      fileMimeType: string;
      /** @description Year in which degree completed. */
      year: string;
    };
    DeleteEducationDto: {
      /** @description Education Id. */
      educationId: string;
    };
    EducationFileEntity: { [key: string]: unknown };
    EducationDto: {
      /** @description Degree name. */
      degree?: string;
      /** @description School name. */
      school?: string;
      /** @description Year of completion. */
      year?: string;
      /** @description UserId of the user who has add the education. */
      user?: components["schemas"]["UserEntity"];
      /** @description Educations files location which are stored in s3 */
      file?: components["schemas"]["EducationFileEntity"];
      /** @description True if projcet is deleted */
      isDeleted?: boolean;
    };
    AddCertificateDto: {
      /** @description Certificate name. */
      certificate: string;
      /** @description Institution name. */
      institution: string;
      /** @description Uploaded education file name. */
      fileName: string;
      /** @description Uploaded education file location {folderName/filename.mimetype} . */
      fileLocation: string;
      /** @description Uploaded file mimetype. */
      fileMimeType: string;
      /** @description Year in which certification completed. */
      year: string;
      /** @description Comments. */
      comments: string;
    };
    UpdateCertificateDto: {
      /** @description Certificate id. */
      certificateId: string;
      /** @description Certificate name. */
      certificate: string;
      /** @description Institution name. */
      institution: string;
      /** @description Uploaded education file name. */
      fileName: string;
      /** @description Uploaded education file location {folderName/filename.mimetype} . */
      fileLocation: string;
      /** @description Uploaded file mimetype. */
      fileMimeType: string;
      /** @description Year in which certification completed. */
      year: string;
      /** @description Comments. */
      comments: string;
    };
    DeleteCertificateDto: {
      /** @description Certificate Id. */
      certificateId: string;
    };
    CertificationDto: {
      /** @description Degree name. */
      certificate?: string;
      /** @description School name. */
      institution?: string;
      /** @description Year of completion. */
      year?: string;
      /** @description School name. */
      comments?: string;
      /** @description UserId of the user who has add the education. */
      user?: components["schemas"]["UserEntity"];
      /** @description Certificates files location which are stored in s3 */
      file?: components["schemas"]["EducationFileEntity"];
      /** @description True if projcet is deleted */
      isDeleted?: boolean;
    };
    AddEmploymentDto: {
      /** @description Designtion or role in the company. */
      role: string;
      /** @description Name of the company or organization. */
      organizationName: string;
      /** @description Company logo name */
      companyLogoName: string;
      /** @description Company logo uploaded location in s3 {folderName/fileName.mimetype} */
      companyLogoLocation: string;
      /** @description Worked from month */
      fromMonth: string;
      /** @description Worked from year */
      fromYear: string;
      /** @description Worked till month */
      toMonth: string;
      /** @description Worked till year */
      toYear: string;
      /** @description True if the user is currently working in this organization. */
      currentlyWorking: boolean;
      /** @description Brief description about the employment */
      description: string;
    };
    UpdateEmploymentDto: {
      /** @description Employment id for which it is needed to be updated. */
      employmentId: string;
      /** @description Designtion or role in the company. */
      role: string;
      /** @description Name of the company or organization. */
      organizationName: string;
      /** @description Company logo name */
      companyLogoName: string;
      /** @description Company logo uploaded location in s3 {folderName/fileName.mimetype} */
      companyLogoLocation: string;
      /** @description Worked from month */
      fromMonth: string;
      /** @description Worked from year */
      fromYear: string;
      /** @description Worked till month */
      toMonth: string;
      /** @description Worked till year */
      toYear: string;
      /** @description True if the user is currently working in this organization. */
      currentlyWorking: boolean;
      /** @description Brief description about the employment */
      description: string;
    };
    EmploymentDto: {
      /** @description Designtion or role in the company. */
      role?: string;
      /** @description Name of the company or organization. */
      organizationName?: string;
      /** @description Company logo name */
      companyLogoName?: string;
      /** @description Company logo uploaded location in s3 {folderName/fileName.mimetype} */
      companyLogoLocation?: string;
      /** @description Worked from month */
      fromMonth?: string;
      /** @description Worked from year */
      fromYear?: string;
      /** @description Worked till month */
      toMonth?: string;
      /** @description Worked till year */
      toYear?: string;
      /** @description True if the user is currently working in this organization. */
      currentlyWorking?: boolean;
      /** @description Brief description about the employment */
      description?: string;
      /** @description UserId of the user who has add the education. */
      user?: components["schemas"]["UserEntity"];
      /** @description True if employment record is deleted */
      isDeleted?: boolean;
    };
    DeleteEmploymentDto: {
      /** @description Employment Id. */
      employmentId: string;
    };
    SendEmploymentInvite: {
      /** @description Employment id which needs to be verified. */
      employmentId: string;
      /** @description Verifiers first name. */
      firstName: string;
      /** @description verifiers last name */
      lastName: string;
      /** @description Verifiers email id */
      email: string;
      /** @description Verfiers role (designation). */
      role: string;
      /** @description Comment which is to be shown to the verifier */
      comments: string;
    };
    VerifyEmploymentDto: {
      /** @description Verification id. */
      verificationId: string;
      /** @description Relationship answer id. */
      relationship: string;
      /** @description If username is correct then true or false. */
      userName: boolean;
      /** @description If position is correct then true or false. */
      position: boolean;
      /** @description If employment dates are correct then true or false. */
      employmentDates: boolean;
      /** @description Answer id of Yes or No. If user is rehireable then Yes or No. */
      isRehireable: string;
      /** @description Recommendation rating. */
      recommendation: number;
    };
    AddProjectFileDto: {
      /** @description File Name. */
      fileName: string;
      /** @description Uploaded file location {folderName/filename.mimetype} . */
      fileLocation: string;
      /** @description Uploaded file mimetype. */
      fileMimeType: string;
    };
    AddClientProjectDto: {
      /** @description Project name. */
      name: string;
      /** @description Project url. */
      url: string;
      /** @description Uploaded logo file name. */
      logoName: string;
      /** @description Uploaded logo file location {folderName/filename.mimetype} . */
      logoLocation: string;
      /** @description Uploaded logo mimetype. */
      logoMimeType: string;
      /** @description Project description. */
      description: string;
      /** @description Project documents. */
      supportingDocs: components["schemas"]["AddProjectFileDto"];
    };
    UpdateClientProjectDto: {
      /** @description Client Project id. */
      clientProjectId: string;
      /** @description Project name. */
      name: string;
      /** @description Project url. */
      url: string;
      /** @description Uploaded logo file name. */
      logoName: string;
      /** @description Uploaded logo file location {folderName/filename.mimetype} . */
      logoLocation: string;
      /** @description Uploaded logo mimetype. */
      logoMimeType: string;
      /** @description Project description. */
      description: string;
      /** @description Project documents. */
      supportingDocs: string[];
    };
    ProjectFileEntity: { [key: string]: unknown };
    ClientProjectDto: {
      /** @description Project name. */
      name: string;
      /** @description Project url. */
      url: string;
      /** @description Uploaded logo file name. */
      logoName: string;
      /** @description Uploaded logo file location {folderName/filename.mimetype} . */
      logoLocation: string;
      /** @description Uploaded logo mimetype. */
      logoMimeType: string;
      /** @description Project description. */
      description: string;
      /** @description UserId of the user who has add the education. */
      user: components["schemas"]["UserEntity"];
      /** @description Project files location which are stored in s3 */
      file?: components["schemas"]["ProjectFileEntity"];
      /** @description True if projcet is deleted */
      isDeleted: boolean;
    };
    DeleteClientProjectDto: {
      /** @description Client Project Id. */
      clientProjectId: string;
    };
    SendClientProjectInviteDto: {
      /** @description Client project id which needs to be verifies. */
      clientProjectId: string;
      /** @description Verifiers name. */
      name: string;
      /** @description Project cost */
      cost: string;
      /** @description Verifiers email id */
      email: string;
      /** @description Comment which is to eb shown to the client */
      comments: string;
    };
    VerifyClientProjectDto: {
      /** @description Verification id. */
      verificationId: string;
      /** @description Relationship answer id. */
      relationship: string;
      /** @description If username is correct then true or false. */
      userName: boolean;
      /** @description If project name is correct then true or false. */
      projectName: boolean;
      /** @description If project cost is correct then true or false. */
      projectCost: boolean;
      /** @description Communication rating. */
      communication: number;
      /** @description Collaboration rating. */
      collaboration: number;
      /** @description Time management rating. */
      timeManagement: number;
      /** @description Cost rating. */
      cost: number;
      /** @description Project result rating. */
      result: number;
      /** @description Recommendation rating. */
      recommendation: number;
    };
    SendConnectionInviteDto: {
      /** @description Members first name */
      firstName: string;
      /** @description Members last name */
      lastName: string;
      /** @description Members phone number */
      phoneNumber: string;
      /** @description Valid Email Id. */
      email: string;
      /** @description Members phone number */
      comment: string;
    };
    ConnectionListDto: {
      /** @description Connection id. */
      connectionId: string;
      /** @description Members first name */
      firstName: string;
      /** @description Members last name */
      lastName: string;
      /** @description Valid Email Id. */
      email: string;
      /** @description Status defines if the member is connected or not. */
      status: boolean;
      /** @description Members profile image location in s3 */
      profileImage: string;
      /** @description Members designation */
      job: string;
    };
    RevokeConnectionDto: {
      /** @description Connection id */
      connectionId: string;
    };
    AddTeamInviteDto: {
      /** @description Invited member first name */
      firstName: string;
      /** @description Invited member last name */
      lastName: string;
      /** @description Valid email id. */
      email: string;
      /** @description Designation of the invited user. */
      designation: string;
    };
    AddTeamDto: {
      /** @description Team name */
      name: string;
      /** @description Brief description about the team */
      description: string;
      /** @description Team profile image name. */
      profileImageName: string;
      /** @description Team profile image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      profileImageLocation: string;
      /** @description Team profile image mime type (jpg, png etc). */
      profileImageMimeType: string;
      /** @description Array of skill id added for team. */
      skills: string[];
      /** @description Array of AddTeamInviteDto data */
      inviteMembers: components["schemas"]["AddTeamInviteDto"];
      /** @description Comment for sending invites. */
      comment: string;
    };
    UpdateTeamDto: {
      /** @description Team id */
      teamId: string;
      /** @description Team name */
      name: string;
      /** @description Brief description about the team */
      description: string;
      /** @description Team profile image name. */
      profileImageName: string;
      /** @description Team profile image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      profileImageLocation: string;
      /** @description Team profile image mime type (jpg, png etc). */
      profileImageMimeType: string;
      /** @description Array of skill id added for team. */
      skills: string[];
    };
    TeamListDto: {
      /** @description Team id */
      teamId: string;
      /** @description Team name */
      teamName: string;
      /** @description Brief description about the team */
      description: string;
      /** @description Array of skills. skill id and skill name added for team. */
      skills: string[];
      /** @description Team profile image name. */
      profileImageName: string;
      /** @description Team profile image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      profileImageLocation: string;
      /** @description Team profile image mime type (jpg, png etc). */
      profileImageMimeType: string;
      /** @description Defines if the user is owner of the project or not */
      type: string;
      /** @description Array of user info who has been invited to the team. */
      teamMembers?: string[];
    };
    DeleteTeamMemberDto: {
      /** @description Team id */
      teamId: string;
      /** @description Team member id */
      teamMemberId: string;
    };
    SendTeamInviteDto: {
      /** @description Team Id. */
      teamId: string;
      /** @description Array of AddTeamInviteDto data */
      inviteMembers: string[];
      /** @description Comment for sending invites. */
      comment: string;
    };
    AddProjectDto: {
      /** @description Title for the project. */
      name: string;
      /** @description Project description. */
      description: string;
      /** @description Project documents. */
      files: string[];
      /** @description Array of skill id. */
      skills: string[];
      /** @description Project budget. */
      budget: string;
      /** @description Project logo image name. */
      projectLogoName: string;
      /** @description Project logo image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      projectLogoLocation: string;
      /** @description Project logo image mime type (jpg, png etc). */
      projectLogoMimeType: string;
    };
    MyProjectListDto: {
      /** @description Project id */
      projectId: string;
      /** @description Project name */
      projectName: string;
      /** @description Brief description about the project */
      description: string;
      /** @description Array of skills. skill id and skill name added for project. */
      skills: string[];
      /** @description project budget. */
      budget: string;
      /** @description Project logo image name. */
      projectLogoName: string;
      /** @description Project logo image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      projectLogoLocation: string;
      /** @description Project logo image mime type (jpg, png etc). */
      projectLogoMimeType: string;
      /** @description Number of users applied to the project. */
      applicantCount: number;
    };
    UpdateProjectDto: {
      /** @description Project Id. */
      projectId: string;
      /** @description Title for the project. */
      name: string;
      /** @description Project description. */
      description: string;
      /** @description Project documents. */
      files: string[];
      /** @description Array of skill id. */
      skills: string[];
      /** @description Project budget. */
      budget: string;
      /** @description Project logo image name. */
      projectLogoName: string;
      /** @description Project logo image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      projectLogoLocation: string;
      /** @description Project logo image mime type (jpg, png etc). */
      projectLogoMimeType: string;
    };
    SkillMapEntity: { [key: string]: unknown };
    ProjectDto: {
      /** @description Title for the project. */
      name: string;
      /** @description Project description. */
      description: string;
      /** @description Project logo image name. */
      projectLogoName?: string;
      /** @description Project logo image location (i.e) Uploaded file location {folderName/filename.mimetype}. */
      projectLogoLocation?: string;
      /** @description Project logo image mime type (jpg, png etc). */
      projectLogoMimeType?: string;
      /** @description Project budget. */
      budget: string;
      /** @description UserId of the user who has created the project. */
      user: components["schemas"]["UserEntity"];
      /** @description Project files location which are stored in s3 */
      skill?: components["schemas"]["SkillMapEntity"];
      /** @description Project files location which are stored in s3 */
      file?: components["schemas"]["ProjectFileEntity"];
      /**
       * @description Defines whether it is of type invite or apply or create.
       * @enum {string}
       */
      status: "CREATED" | "LISTED" | "ON_GOING" | "COMPLETED";
      /** @description True if projcet is deleted */
      isDeleted: boolean;
    };
    ProjectMemberDto: {
      /** @description Users Id. */
      memberId: string;
      /** @description Users email id. */
      email: string;
      /** @description Users designation. */
      job: string;
      /** @description users profile image. */
      profileImage: string;
      /** @description Users self description. */
      about: string;
      /** @description Defines user is owner or freelancer. */
      type: string;
    };
    RemoveProjectMemberDto: {
      /** @description Project Id. */
      projectId: string;
      /** @description Members name. */
      memberId: string;
    };
    ApplyProjectDto: {
      /** @description Project id in which is to applied. */
      projectId: string;
      /** @description Any message which is to be shared with the project owner while applying. */
      message: string;
    };
    AcceptProjectDto: {
      /** @description Project id in which is to applied. */
      projectId: string;
      /** @description Users id, whose application to be accpeted. */
      memberId: string;
    };
    UpdateProjectStatusDto: {
      /** @description Project id in which is to applied. */
      projectId: string;
      /** @description Project status, which needs to be updated to. */
      projectStatus: string;
    };
    SendProjectInviteDto: {
      /** @description Project Id. */
      projectId: string;
      /** @description Members name. */
      name: string;
      /** @description Members email id. */
      email: string;
      /** @description Array of skill name(Note: It is not a skill id, it is a skill name). */
      skills: string[];
      /** @description Comment for sending invites. */
      comment: string;
    };
    AddTemplateDto: {
      /** @description Title which needs to be published. */
      publishedTitle?: string;
      /** @description Description which needs to be published. */
      publishedDescription?: string;
      /**
       * @description Title which needs to be drafted,
       *       If the user clicks publish then the drafted title is moved to publishedTitle and this draftedTitle is made empty.
       */
      draftedTitle?: string;
      /**
       * @description Description which needs to be drafted,
       *       If the user clicks publish then the drafted title is moved to publishedDescription and this draftedDescription is made empty.
       */
      draftedDescription?: string;
    };
    TemplateDto: {
      /** @description User id, who has created this template. */
      createdBy?: components["schemas"]["UserEntity"];
      /** @description Template slug, which is to be shown on FE. */
      slug?: string;
      /** @description Publish title name */
      publishedTitle?: string;
      /** @description Published description */
      publishedDescription?: string;
      /**
       * Format: date-time
       * @description Last published at (Date and Time)
       */
      lastPublisedAt?: string;
      /** @description Drafted Title */
      draftedTitle?: string;
      /** @description Drafted description */
      draftedDescription?: string;
      /**
       * Format: date-time
       * @description Drafted description
       */
      lastDraftedAt?: string;
      /** @description Status true or false, Defines template is active or not. */
      status?: boolean;
    };
    UpdateTemplateDto: {
      /** @description Template id. */
      templateId: string;
      /** @description Title which needs to be published. */
      publishedTitle?: string;
      /** @description Description which needs to be published. */
      publishedDescription?: string;
      /**
       * @description Title which needs to be drafted,
       *       If the user clicks publish then the drafted title is moved to publishedTitle and this draftedTitle is made empty.
       */
      draftedTitle?: string;
      /**
       * @description Description which needs to be drafted,
       *       If the user clicks publish then the drafted title is moved to publishedDescription and this draftedDescription is made empty.
       */
      draftedDescription?: string;
    };
    DeleteTemplateDto: {
      /** @description Template id. */
      templateIds: string[];
    };
    TemplateInfoDto: {
      /** @description Publish title name */
      title: string;
      /** @description Published description */
      description: string;
    };
    ActivateOrDeactivateDto: {
      /** @description User id for the user for status needs to be updated. */
      userId?: string;
      /** @description True if user needs to be activated. False if user needs to be suspended. */
      statusToUpdate?: boolean;
    };
    UserCountDto: {
      /** @description Total no of user */
      total: number;
      /** @description No of user in last one month */
      lastMonth: number;
    };
    DashboardDto: {
      /** @description All users count. */
      allUser: components["schemas"]["UserCountDto"];
      /** @description Active users count. */
      activeUser: components["schemas"]["UserCountDto"];
      /** @description Inactive users count. */
      inActiveUser: components["schemas"]["UserCountDto"];
    };
    StripeConnectDto: {
      /** @description Url to be redirected, where user can create account. */
      link: string;
    };
    InvoicePayloadDto: {
      /** @description Email address to whome the invoice needs to be sent. */
      email: string;
      /** @description Amount, which needs to be requested in invoice. */
      amount: number;
      /**
       * Format: date-time
       * @description Due date for the invoice. Must be greater than current date.
       */
      dueDate: string;
      /** @description Comment, which needs to be added in invoice. */
      comment: string;
    };
    InvoiceDto: {
      /** @description User id. */
      user: components["schemas"]["UserEntity"];
      /** @description Stripe invoice id. */
      invoiceId: string;
      /** @description Stripe customer id. */
      customerId: string;
      /** @description Email id to whome the invoice is sent. */
      email: string;
      /** @description Amount which needs to requested in invoice */
      amount: number;
      /**
       * Format: date-time
       * @description Due date for invoice
       */
      dueDate: string;
      /** @description Comment to shown in invoice */
      comment: string;
      /** @description Status of the invoice paid or not paiad, default set to false */
      status: boolean;
      /** @description If invoice is deleted it is set  to true */
      isDeleted: boolean;
    };
    InvoiceHistoryDto: {
      /** @description userId. */
      userId: string;
      /** @description InvoiceId. */
      invoiceId: string;
      /** @description stripeInvoiceId. */
      stripeInvoiceId: string;
      /** @description customerId. */
      customerId: string;
      /** @description email. */
      email: string;
      /** @description due date of invoice. */
      dueDate: string;
      /** @description date at which the invoice is created. */
      createdAt: string;
      /** @description ammount. */
      amount: string;
      /** @description comment. */
      comment: string;
      /** @description status. */
      status: string;
    };
  };
}

export interface operations {
  AuthController_sendEmailOtp: {
    parameters: {};
    responses: {
      /** Successfully sent OTP to the given email. */
      200: unknown;
      /** OTP is already verified. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendEmailDto"];
      };
    };
  };
  AuthController_verfiyEmailOtp: {
    parameters: {};
    responses: {
      /** OTP verified successfully. */
      200: unknown;
      /** No OTP is sent to the given email address. (or) Invalid OTP. (or) OTP is already verified. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyEmailDto"];
      };
    };
  };
  AuthController_sendPhoneOtp: {
    parameters: {};
    responses: {
      /** Successfully sent OTP to the given phone number. */
      200: unknown;
      /** Email id not yet verified. (or) OTP is already verified. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendPhoneOtpDto"];
      };
    };
  };
  AuthController_verifyPhoneOtp: {
    parameters: {};
    responses: {
      /** OTP verified successfully. */
      200: unknown;
      /** Email id not yet verified. (or) Invalid OTP. (or) OTP is already verified. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyPhoneOtpDto"];
      };
    };
  };
  AuthController_register: {
    parameters: {};
    responses: {
      /** User successfully registered. */
      200: unknown;
      /** Email and phone number must be verified. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RegisterDto"];
      };
    };
  };
  AuthController_userLogin: {
    parameters: {};
    responses: {
      /** User successfully logged in. */
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      /** User is suspended. (or) Invalid credentials. */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UserLoginDto"];
      };
    };
  };
  AuthController_refresh: {
    parameters: {};
    responses: {
      /** User successfully logged in. */
      200: {
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      /** Refresh token not found from cookie. */
      400: unknown;
      /** Invalid refresh token. */
      422: unknown;
    };
  };
  AuthController_logout: {
    parameters: {};
    responses: {
      /** User successfully logged out. */
      200: unknown;
    };
  };
  AuthController_sendForgotPasswordOTP: {
    parameters: {};
    responses: {
      /** Successfully sent OTP for forgot password to the given email. */
      200: unknown;
      /** User not found */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendEmailDto"];
      };
    };
  };
  AuthController_verifyForgotPasswordOTP: {
    parameters: {};
    responses: {
      /** OTP verified successfully. */
      200: unknown;
      /** No OTP is sent to the given email address. (or) Invalid OTP. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyEmailDto"];
      };
    };
  };
  AuthController_updateForgotPassword: {
    parameters: {};
    responses: {
      /** Successfully updated the password. */
      200: unknown;
      /** No OTP is sent to the given email address. (or) Invalid OTP. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ForgotPasswordDto"];
      };
    };
  };
  AuthController_verify: {
    parameters: {};
    responses: {
      /** User information. */
      200: {
        content: {
          "application/json": components["schemas"]["VerifyInfoDto"];
        };
      };
      /** Invalid verification id. */
      400: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyDto"];
      };
    };
  };
  UserController_getS3Url: {
    parameters: {
      query: {
        /** Mime type of the file, it can be jpg, png etc. */
        mimeType: string;
        /** Name of the folder in which the file needs to be uploaded in s3 (ex: "profile") */
        folderName: string;
      };
    };
    responses: {
      /** S3 presigned url. */
      200: {
        content: {
          "application/json": components["schemas"]["S3UploadDto"];
        };
      };
    };
  };
  UserController_getUserInfo: {
    parameters: {};
    responses: {
      /** Users profile informations. */
      200: {
        content: {
          "application/json": components["schemas"]["UserListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  UserController_updateProfileInfo: {
    parameters: {};
    responses: {
      /** Sucessfully updated user profile info. */
      200: unknown;
      /** Email and phone number must be verified. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProfileDto"];
      };
    };
  };
  UserController_changePassword: {
    parameters: {};
    responses: {
      /** Successfully updated the password. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ChangePasswordDto"];
      };
    };
  };
  NotificationController_getNotifications: {
    parameters: {};
    responses: {
      /** User notification list. */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationsDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  NotificationController_updateNotificationAsViewed: {
    parameters: {};
    responses: {
      /** User notification list. */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationsDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNotificationStatus"];
      };
    };
  };
  NotificationController_getNotificationSettings: {
    parameters: {};
    responses: {
      /** User notification list. */
      200: {
        content: {
          "application/json": components["schemas"]["NotificationSettingDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  NotificationController_updateNotificationSettings: {
    parameters: {};
    responses: {
      /** Updated notification settings record. */
      200: unknown;
      /** Notification settings record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateNotificationSettings"];
      };
    };
  };
  NotificationController_addNotificationSettings: {
    parameters: {};
    responses: {
      /** Added notification settings record. */
      200: unknown;
      /** Notification settings record already present. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ReputationController_getReputationScore: {
    parameters: {};
    responses: {
      /** Returns the reputation score of the user */
      default: unknown;
    };
  };
  CommunityController_createNewUser: {
    parameters: {};
    responses: {
      /** Successfully created user in discourse. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  CommunityController_getTags: {
    parameters: {};
    responses: {
      /** List of all tages. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  CommunityController_getCategories: {
    parameters: {};
    responses: {
      /** List of all categories. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  CommunityController_getTopics: {
    parameters: {};
    responses: {
      /** List of all topics. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  CommunityController_getPosts: {
    parameters: {};
    responses: {
      /** Successfully created a topic. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateTopicDto"];
      };
    };
  };
  CommunityController_getTopicDetails: {
    parameters: {
      path: {
        topicId: number;
      };
    };
    responses: {
      /** List of all topics. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  CommunityController_getReplies: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** List of all topics. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  CommunityController_replyToPost: {
    parameters: {};
    responses: {
      /** Reply to the post */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["PostReplyDto"];
      };
    };
  };
  CommunityController_likePost: {
    parameters: {
      path: {
        postId: number;
      };
    };
    responses: {
      /** like and unlike a post */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  SkillController_getSkills: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** Skill informations. */
      200: {
        content: {
          "application/json": components["schemas"]["SkillDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  SkillController_addSkills: {
    parameters: {};
    responses: {
      /** Successfully added new skill. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Skill already added. */
      409: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddSkillDto"];
      };
    };
  };
  SkillController_bulkUploadSkills: {
    parameters: {};
    responses: {
      /** Multiple skill added in DB. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  SkillController_getUserSkills: {
    parameters: {};
    responses: {
      /** Skill informations. */
      200: {
        content: {
          "application/json": components["schemas"]["UserSkillDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  SkillController_addUserSkill: {
    parameters: {};
    responses: {
      /** Successfully added new skill. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Skill already added. */
      409: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddUserSkillDto"];
      };
    };
  };
  SkillController_sendVerificationInvite: {
    parameters: {};
    responses: {
      /** Successfully sent invitation to verify the skill. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Skill information not found. */
      409: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SkillInviteDto"];
      };
    };
  };
  SkillController_getSkillsQuestion: {
    parameters: {
      path: {
        verifictaionId: string;
      };
    };
    responses: {
      /** Skill verification questions. */
      200: {
        content: {
          "application/json": components["schemas"]["UserSkillDto"];
        };
      };
      /** Skill information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  SkillController_verifyQuestionsAnswer: {
    parameters: {};
    responses: {
      /** Successfully verified. */
      200: unknown;
      /** Skill information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifySkillDto"];
      };
    };
  };
  ReputationConstantController_getWeightageForReputation: {
    parameters: {};
    responses: {
      /** Reputation weightage information. */
      200: {
        content: {
          "application/json": components["schemas"]["ReputationWeightDto"];
        };
      };
      /** Reputation weightage not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ReputationConstantController_updateWeightageForReputation: {
    parameters: {};
    responses: {
      /** Updated reputation weightage record. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Basic, Advance and Skills must be 100% and sum of Education, Certification, Project and Employment must be 100%. */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateReputationWeightDto"];
      };
    };
  };
  ReputationConstantController_addWeightageForReputation: {
    parameters: {};
    responses: {
      /** Added new reputation weightage record. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Basic, Advance and Skills must be 100% and sum of Education, Certification, Project and Employment must be 100%. */
      422: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddReputationWeightDto"];
      };
    };
  };
  ReputationConstantController_CreateQuestion: {
    parameters: {};
    responses: {
      /** New question record is added. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddQuestionDto"];
      };
    };
  };
  ReputationConstantController_CreateAnswer: {
    parameters: {};
    responses: {
      /** New answer record for the question is added. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddAnswerDto"];
      };
    };
  };
  AdminSettingsController_getWeightageForReputation: {
    parameters: {};
    responses: {
      /** Platform settings data. */
      200: {
        content: {
          "application/json": components["schemas"]["PlatformSettingsDto"];
        };
      };
      /** Settings record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  AdminSettingsController_UpdatePlatform: {
    parameters: {};
    responses: {
      /** Successfully updated the platform record. */
      200: unknown;
      /** Settings record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdatePlatformSettingsDto"];
      };
    };
  };
  AdminSettingsController_addNewPlatform: {
    parameters: {};
    responses: {
      /** Successfully added the new platform record. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddPlatformSettingsDto"];
      };
    };
  };
  EducationController_getEducation: {
    parameters: {};
    responses: {
      /** Education information. */
      200: {
        content: {
          "application/json": components["schemas"]["EducationDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EducationController_updateEducation: {
    parameters: {};
    responses: {
      /** Successfully updated education information. */
      200: unknown;
      /** Education information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEducationDto"];
      };
    };
  };
  EducationController_addNewEducation: {
    parameters: {};
    responses: {
      /** Successfully added education information. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddEducationDto"];
      };
    };
  };
  EducationController_deleteEducationDetail: {
    parameters: {};
    responses: {
      /** Successfully deleted education information. */
      200: unknown;
      /** Education information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteEducationDto"];
      };
    };
  };
  EducationController_getEducationById: {
    parameters: {
      path: {
        educationId: string;
      };
    };
    responses: {
      /** Education information. */
      200: {
        content: {
          "application/json": components["schemas"]["EducationDto"];
        };
      };
      /** Education information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EducationController_getCertificates: {
    parameters: {};
    responses: {
      /** Certificate information. */
      200: {
        content: {
          "application/json": components["schemas"]["CertificationDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EducationController_updateCertificate: {
    parameters: {};
    responses: {
      /** Successfully updated certificate information. */
      200: unknown;
      /** Certificate information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateCertificateDto"];
      };
    };
  };
  EducationController_addNewCertification: {
    parameters: {};
    responses: {
      /** Successfully added certificate information. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddCertificateDto"];
      };
    };
  };
  EducationController_deleteCertificateDetail: {
    parameters: {};
    responses: {
      /** Successfully deleted certificate information. */
      200: unknown;
      /** Certificate information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteCertificateDto"];
      };
    };
  };
  EducationController_getCertificateById: {
    parameters: {
      path: {
        certificateId: string;
      };
    };
    responses: {
      /** Certificate information. */
      200: {
        content: {
          "application/json": components["schemas"]["CertificationDto"];
        };
      };
      /** Certificate information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EmploymentController_getAllEmployment: {
    parameters: {};
    responses: {
      /** Employment informations. */
      200: {
        content: {
          "application/json": components["schemas"]["EmploymentDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EmploymentController_updateEmployment: {
    parameters: {};
    responses: {
      /** Successfully updated the employment data. */
      200: unknown;
      /** Employment record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateEmploymentDto"];
      };
    };
  };
  EmploymentController_createNewEmployment: {
    parameters: {};
    responses: {
      /** Successfully added the employment data. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddEmploymentDto"];
      };
    };
  };
  EmploymentController_deleteEmploymentRecord: {
    parameters: {};
    responses: {
      /** Deleted the record for give employment id. */
      200: unknown;
      /** Employment record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteEmploymentDto"];
      };
    };
  };
  EmploymentController_getEmploymentbyId: {
    parameters: {
      path: {
        employmentId: string;
      };
    };
    responses: {
      /** Employment informations. */
      200: {
        content: {
          "application/json": components["schemas"]["EmploymentDto"];
        };
      };
      /** Employment record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EmploymentController_getProjectQuestion: {
    parameters: {
      path: {
        verificationId: string;
      };
    };
    responses: {
      /** Employment questions. */
      200: unknown;
      /** Employment record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  EmploymentController_sendEmploymentInvite: {
    parameters: {};
    responses: {
      /** Send invite to verify employment data. */
      200: unknown;
      /** Employment record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendEmploymentInvite"];
      };
    };
  };
  EmploymentController_verifyQuestionsAnswer: {
    parameters: {};
    responses: {
      /** Successfully verified. */
      200: unknown;
      /** Education information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyEmploymentDto"];
      };
    };
  };
  ClientProjectController_getAllClientProjects: {
    parameters: {};
    responses: {
      /** Client project informations. */
      200: {
        content: {
          "application/json": components["schemas"]["ClientProjectDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ClientProjectController_updateEmployment: {
    parameters: {};
    responses: {
      /** Successfully updated the client project. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Client project record not found. */
      404: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateClientProjectDto"];
      };
    };
  };
  ClientProjectController_addNewClientProject: {
    parameters: {};
    responses: {
      /** Successfully added the client project. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddClientProjectDto"];
      };
    };
  };
  ClientProjectController_deleteEmploymentRecord: {
    parameters: {};
    responses: {
      /** Deleted the record for give client project id. */
      200: unknown;
      /** Client project record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteClientProjectDto"];
      };
    };
  };
  ClientProjectController_sendClientProjectInvite: {
    parameters: {};
    responses: {
      /** Send invite to verify client project data. */
      200: unknown;
      /** Invitation already sent. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendClientProjectInviteDto"];
      };
    };
  };
  ClientProjectController_getProjectQuestion: {
    parameters: {
      path: {
        clientProjectId: string;
      };
    };
    responses: {
      /** Client project questions. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ClientProjectController_getClientProjectById: {
    parameters: {
      path: {
        clientProjectId: string;
      };
    };
    responses: {
      /** Client project informations. */
      200: unknown;
      /** Client project record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ClientProjectController_verifyClientProjectInvite: {
    parameters: {};
    responses: {
      /** Successfully verified. */
      200: unknown;
      /** Invitation already sent. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["VerifyClientProjectDto"];
      };
    };
  };
  ConnectionController_sendConnectionInvite: {
    parameters: {};
    responses: {
      /** Successfully send connection invite to the email. */
      200: unknown;
      /** User with the given email address is registered with panoton. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendConnectionInviteDto"];
      };
    };
  };
  ConnectionController_acceptConnectionInvite: {
    parameters: {};
    responses: {
      /** Successfully accepted the invite connection. */
      200: unknown;
      /** User with the given email address is registered with panoton. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ConnectionController_getUserConnection: {
    parameters: {};
    responses: {
      /** Connection information. */
      200: {
        content: {
          "application/json": components["schemas"]["ConnectionListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ConnectionController_revokeConnection: {
    parameters: {};
    responses: {
      /** Successfully revoked the connection. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Invalid connection id. */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RevokeConnectionDto"];
      };
    };
  };
  TeamController_getTeamListForUser: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** Team information. */
      200: {
        content: {
          "application/json": components["schemas"]["TeamListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TeamController_updateTeam: {
    parameters: {};
    responses: {
      /** Successfully updated the team record. */
      200: unknown;
      /** Team record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTeamDto"];
      };
    };
  };
  TeamController_createNewTeam: {
    parameters: {};
    responses: {
      /** Successfully added new team record. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddTeamDto"];
      };
    };
  };
  TeamController_deleteTeam: {
    parameters: {};
    responses: {
      /** Successfully team record deleted. */
      200: unknown;
      /** Team record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TeamController_getTeamInfo: {
    parameters: {
      path: {
        teamId: string;
      };
    };
    responses: {
      /** Team information. */
      200: {
        content: {
          "application/json": components["schemas"]["TeamListDto"];
        };
      };
      /** Team record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TeamController_deleteTeamMember: {
    parameters: {};
    responses: {
      /** Member deleted. */
      200: unknown;
      /** Team record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteTeamMemberDto"];
      };
    };
  };
  TeamController_sendInvitationToExtenamUser: {
    parameters: {};
    responses: {
      /** Successfully sent team invitation. */
      200: unknown;
      /** Team record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendTeamInviteDto"];
      };
    };
  };
  TeamController_acceptInvite: {
    parameters: {};
    responses: {
      /** Successfully accepted team invitation. */
      200: unknown;
      /** Team record not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_updateProject: {
    parameters: {};
    responses: {
      /** Successfully updated the project. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProjectDto"];
      };
    };
  };
  ProjectController_addNewProject: {
    parameters: {};
    responses: {
      /** Successfully created the project. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddProjectDto"];
      };
    };
  };
  ProjectController_deleteProjects: {
    parameters: {};
    responses: {
      /** Successfully deleted the project. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_getProjectBySearch: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** Project information. */
      200: {
        content: {
          "application/json": components["schemas"]["MyProjectListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_getMyProject: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
        /** This could be either "ME" or "ELSE". */
        createdBy: unknown;
        /** This could be either one of project status. */
        status: string;
      };
    };
    responses: {
      /** Project information. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectDto"];
        };
      };
      /** Invalid status in query param. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_getProjectInfoById: {
    parameters: {
      path: {
        projectId: string;
      };
    };
    responses: {
      /** Project information. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectDto"];
        };
      };
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_getProjectMembersList: {
    parameters: {
      path: {
        projectId: string;
      };
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** List project members. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectMemberDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_removeProjectMember: {
    parameters: {};
    responses: {
      /** Member deleted. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["RemoveProjectMemberDto"];
      };
    };
  };
  ProjectController_getApplicantsList: {
    parameters: {
      path: {
        projectId: string;
      };
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** Project applicant list. */
      200: {
        content: {
          "application/json": components["schemas"]["ProjectMemberDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  ProjectController_applyForProject: {
    parameters: {};
    responses: {
      /** Successfully applied for the project. */
      200: unknown;
      /** Already applied for the project. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ApplyProjectDto"];
      };
    };
  };
  ProjectController_addUserToProject: {
    parameters: {};
    responses: {
      /** Successfully accepted the project. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AcceptProjectDto"];
      };
    };
  };
  ProjectController_updateProjectStatus: {
    parameters: {};
    responses: {
      /** Updated project status. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateProjectStatusDto"];
      };
    };
  };
  ProjectController_sendProjectInvite: {
    parameters: {};
    responses: {
      /** Successfully sent invitation to the given email address. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["SendProjectInviteDto"];
      };
    };
  };
  ProjectController_acceptInvite: {
    parameters: {};
    responses: {
      /** Successfully accepted the project. */
      200: unknown;
      /** Project information not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  WalletController_getWalletInfo: {
    parameters: {};
    responses: {
      /** Wallet info. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TemplateController_getTemplateList: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** All templates list. */
      200: {
        content: {
          "application/json": components["schemas"]["TemplateDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TemplateController_updateTemplate: {
    parameters: {};
    responses: {
      /** Updated template Information. */
      200: {
        content: {
          "application/json": components["schemas"]["TemplateDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateTemplateDto"];
      };
    };
  };
  TemplateController_addNewTemplate: {
    parameters: {};
    responses: {
      /** Added template Information. */
      200: {
        content: {
          "application/json": components["schemas"]["TemplateDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["AddTemplateDto"];
      };
    };
  };
  TemplateController_deleteTempalte: {
    parameters: {};
    responses: {
      /** Successfully deleted the given template id. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["DeleteTemplateDto"];
      };
    };
  };
  TemplateController_publishTemplates: {
    parameters: {};
    responses: {
      /** Published template Information. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TemplateController_getTemplateInfoByTemplateIId: {
    parameters: {
      path: {
        templateId: string;
      };
    };
    responses: {
      /** Template Information. */
      200: {
        content: {
          "application/json": components["schemas"]["TemplateDto"];
        };
      };
      /** Template not found. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  TemplateController_getTemplateInfoForSlug: {
    parameters: {
      path: {
        slug: string;
      };
    };
    responses: {
      /** Template Information. */
      200: {
        content: {
          "application/json": components["schemas"]["TemplateInfoDto"];
        };
      };
      /** Template not found. */
      400: unknown;
    };
  };
  AdminController_getAdminProfileInfo: {
    parameters: {};
    responses: {
      /** Users profile informations. */
      200: {
        content: {
          "application/json": components["schemas"]["UserListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  AdminController_getUserList: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** Users List. */
      200: {
        content: {
          "application/json": components["schemas"]["UserListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  AdminController_activateOrDeactivateUser: {
    parameters: {};
    responses: {
      /** User status is updated. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** User not found */
      404: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["ActivateOrDeactivateDto"];
      };
    };
  };
  AdminController_exportUserInfo: {
    parameters: {
      query: {
        /** If specific user info needs to be exported. */
        userId?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
        /** If status is not defined then by default . */
        status?: boolean;
      };
    };
    responses: {
      /** Users List. */
      200: {
        content: {
          "application/json": components["schemas"]["UserListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** Something went wrong, Please try later. */
      500: unknown;
    };
  };
  AdminController_getUserInfo: {
    parameters: {
      path: {
        userId: string;
      };
    };
    responses: {
      /** User information. */
      200: {
        content: {
          "application/json": components["schemas"]["UserListDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
      /** User not found */
      404: unknown;
    };
  };
  AdminController_getDashboardData: {
    parameters: {};
    responses: {
      /** Admin dashboard information. */
      200: {
        content: {
          "application/json": components["schemas"]["DashboardDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  StripeController_addNewStripeConnect: {
    parameters: {};
    responses: {
      /** Send stripe connect to user */
      200: {
        content: {
          "application/json": components["schemas"]["StripeConnectDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  StripeController_sendInvoice: {
    parameters: {};
    responses: {
      /** Invoice sent sucessfully. */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["InvoicePayloadDto"];
      };
    };
  };
  StripeController_getAccount: {
    parameters: {};
    responses: {
      /** Stripe Account info. */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  StripeController_checkAndUpdateAccountStatus: {
    parameters: {};
    responses: {
      /** Stripe account status has been updated */
      200: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  StripeController_getInvoices: {
    parameters: {
      query: {
        /** String which is to be searched for. */
        search?: string;
        /** Page which is to be shown. */
        page?: number;
        /** No of records which is to be shown. */
        limit?: number;
      };
    };
    responses: {
      /** List of invoices. */
      200: {
        content: {
          "application/json": components["schemas"]["InvoiceHistoryDto"];
        };
      };
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
  StripeController_verifyInvoice: {
    parameters: {
      path: {
        invoiceId: string;
      };
    };
    responses: {
      /** Invoice successfully verified. */
      200: unknown;
      /** Invoice not found. (Or) Invoice not yet verfied. */
      400: unknown;
      /** Unauthorized. If not logged in. */
      401: unknown;
      /** Forbidden, if permission denied. */
      403: unknown;
    };
  };
}

export interface external {}
